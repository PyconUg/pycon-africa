# Generated by Django 5.0.2 on 2024-02-29 23:48

import django.db.models.deletion
import django.utils.timezone
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('registration', '0004_profile_profile_id_alter_profile_user'),
        ('talks', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Day',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('conference_day', models.CharField(max_length=30)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Room',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('room', models.CharField(max_length=50)),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='Event',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('day_session', models.CharField(choices=[('Morning', 'Morning'), ('Afternoon', 'Afternoon'), ('Evening', 'Evening')], default='', max_length=10)),
                ('conference_day', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedule.day')),
                ('room', models.ForeignKey(default='', on_delete=django.db.models.deletion.CASCADE, to='schedule.room')),
            ],
            options={
                'managed': True,
            },
        ),
        migrations.CreateModel(
            name='TalkSchedule',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_an_event', models.BooleanField(default=False)),
                ('event', models.CharField(blank=True, default='', help_text='Name to event', max_length=250)),
                ('fa_icon', models.CharField(blank=True, default='', max_length=100)),
                ('event_url', models.CharField(blank=True, default='', help_text='Name to event', max_length=250)),
                ('external_url', models.CharField(blank=True, default='', help_text='Link to event', max_length=250)),
                ('start_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('end_time', models.DateTimeField(default=django.utils.timezone.now)),
                ('day_session', models.CharField(choices=[('Morning', 'Morning'), ('Afternoon', 'Afternoon'), ('Evening', 'Evening')], default='', max_length=10)),
                ('rowspan', models.CharField(blank=True, default='', help_text='Use to determine how this talk fits in its time allocation', max_length=10)),
                ('concurrent_talk', models.BooleanField(default=False)),
                ('is_a_keynote_speaker', models.BooleanField(default=False)),
                ('is_a_panel', models.BooleanField(default=False)),
                ('allocated_room', models.ForeignKey(blank=True, default='', on_delete=django.db.models.deletion.CASCADE, to='schedule.room')),
                ('conference_day', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='schedule.day')),
                ('speakers', models.ManyToManyField(blank=True, to='registration.profile', verbose_name='Speaker')),
                ('talk', models.ForeignKey(default='', help_text="Select a Talk if it's a Speaker giving a talk", on_delete=django.db.models.deletion.CASCADE, to='talks.proposal')),
            ],
            options={
                'verbose_name_plural': 'talk Schedule',
                'managed': True,
            },
        ),
    ]
